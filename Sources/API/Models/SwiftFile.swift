//
//  SwiftFile.swift
//  
//
//  Created by Nickolay Truhin on 28.11.2020.
//

import Foundation

protocol SwiftFile {
    var params: [RespParameter] { get }
    var description: String { get }
    var string: String { get }
}

extension SwiftFile {
    var wrappedString: String {
        """
        // Vkontakter - VK Bot Swift SDK.
        // This file is autogenerated by API package.

        import AnyCodable

        \(string)
        """
    }
    
}

struct TypeFile: SwiftFile {
    let description: String
    let params: [RespParameter]
    let apiName: String
    
    var codeName: String {
        apiName.camelized.capitalizingFirstLetter()
    }
    
    var string: String {
        """
        /**
         \(description)

         SeeAlso VK API Reference:
         [\(codeName)](https://vk.com/dev/objects/\(apiName)
         */
        public struct \(codeName): Codable {
            \(params.generate.i(1))
            \(params.generateInit)
        }
        """
    }
}

extension Method {
    var codeCapitalized: String {
        codeName.capitalizingFirstLetter()
    }
}

struct MethodExtensionFile: SwiftFile {
    let description: String
    let params: [RespParameter]
    let methodGroup: String
    let method: Method
    let resp: RespParameter
    
    var methodApi: String {
        methodGroup + "." + method.apiName
    }
    
    var respTypeContent: String {
        if case let .Object(object) = resp.type.innerObject, let respParams = object?.params, !respParams.isEmpty {
            return "\nstruct \(resp.type.innerObject.string!): Codable {\n\("\n".i(1))\((respParams.generate + "\n").i(1))\(respParams.generateInit)\n}\n".i(1)
        }
        return ""
    }
    
    var respType: String {
        resp.type.string!
    }
    
    var paramsType: String {
        method.codeCapitalized.capitalizingFirstLetter() + "Params"
    }

    var string: String {
        """
        public extension Bot {

            /// Parameters container struct for `\(method.codeName)` method
            class \(paramsType): JSONEncodable {

                \(params.generate.i(2))
                \(params.generateInit.i(1))
            }
            \(respTypeContent)
            /**
             \(description)

             See also VK API Reference:
             [\(method.codeCapitalized)](https://vk.com/dev/\(methodApi))
             
             - Parameters:
                 - params: Parameters container, see `\(paramsType)` struct
             - Throws: Throws on errors
             - Returns: Future of `\(respType)` type
             */
            @discardableResult
            func \(method.codeName)(params: \(paramsType)) throws -> Future<\(respType)> {
                let headers = httpHeaders(for: params)
                return try client
                    .request(endpoint: "\(methodApi)", params: params, headers: headers)
                    .flatMapThrowing { (container) -> \(respType) in
                        return try self.processContainer(container)
                }
            }
        }
        """
    }
}

extension String {
    var letOrVar: String {
        [ "peerId" ].contains(self) ? "var" : "let"
    }
    
    var safeNamed: String {
         containsSwiftKeywords ? "`\(self)`" : self
    }
    
    var safeVarNamed: String {
        containsSwiftKeywords ? "_\(self)" : self
    }
    
    var containsSwiftKeywords : Bool {
        String.swiftKeywords.contains { caseInsensitiveCompare($0) == .orderedSame }
    }
    
    fileprivate static var swiftKeywords = [ "class", "enum", "type", "in", "repeat" ]
}

extension RespParameter {
    var generate: String {
        var str = [String]()
        if let desc = description, !desc.isEmpty {
            str.append("/// \(desc)\n")
        }
        
        let varPart = "public \(name.letOrVar) \(name.safeNamed): \(typeString)"

        switch type {
        case let .Array(.Object(data)), let .ArrayByComma(.Object(data)), let .Object(data):
            guard let data = data else { fatalError() }
            let initStr = data.params.generateInit
            str.append("public struct \(data.name): Codable {\n\n\(data.params.generate)".i(1) + "\n".i(1) + "\(initStr)}\n\n")
        case _ where ParamType.typedCases.contains(type), .Array, .ArrayByComma: break
        case let .Enum(data):
            guard let data = data else { fatalError() }
            let casesContent: String = data.cases.sorted( by: { $0.0 < $1.0 }).map {
                var str = "\n/// " + $0.value.1 + "\ncase "
                switch data.casesType {
                case .String:
                    let val = $0.value.0
                    guard !(val.first?.isNumber ?? false) else { fallthrough }
                    str += val.safeNamed
                default:
                    let val: String
                    switch data.casesType {
                    case .String:
                        val = "\"\($0.value.0)\""
                    default:
                        val = $0.value.0
                    }
                    str += $0.key.safeNamed + " = " + val
                }
                return str.i(1)
            }.joined(separator: "\n")
            let name = data.name.safeNamed
            str.append("public enum \(name): \(data.casesType.string!), Codable {\(casesContent)\n}\n\n")
        case let .Typealias(data):
            guard let data = data else { fatalError() }
            str.append("public typealias \(name.capitalizingFirstLetter()) = \(data)\n\n")
        default:
            fatalError()
        }
        
        str.append(varPart)
        str.append("\n")
        return str.joined()
    }
}

extension Array where Element == RespParameter {

    var generate: String {
        map { $0.generate }.joined(separator: "\n")
    }
    
    var generateInit: String {
        let initContent = map { param in "\nself.\(param.name) = \(param.name.safeNamed)" }.joined().i(1)
        let initParams = map { param in "\(param.name): \(param.typeString)\(param.required ? "" : " = nil")" }.joined(separator: ", ")
        return "public init(\(initParams)) {\(initContent)\n".i(1) + "}\n"
    }

}
