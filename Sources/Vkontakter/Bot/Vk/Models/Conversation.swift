// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

/**
 Объект описывает беседу с пользователем, сообществом или групповой чат.

 SeeAlso VK API Reference:
 [Conversation](https://vk.com/dev/objects/conversation
 */
public struct Conversation: Codable {
    /// Информация о собеседнике.
    public struct Peer: Codable {
        
        /// Идентификатор назначения.
        public let id: Int64?
        
        /// Тип. Возможные значения: user, chat, group, email
        public enum `Type`: String, Codable {
            /// chat
            case chat
        
            /// email
            case email
        
            /// group
            case group
        
            /// user
            case user
        }
        
        public let `type`: Type?
        
        /// Локальный идентификатор назначения. Для чатов — id - 2000000000, для сообществ — -id, для e-mail — -(id+2000000000).
        public let localId: Int64?
        
        public init(id: Int64? = nil, type: Type? = nil, localId: Int64? = nil) {
            self.id = id
            self.type = `type`
            self.localId = localId
        }
    }
    
    public let peer: Peer?
    
    /// Идентификатор последнего прочтенного входящего сообщения.
    public let inRead: Int64?
    
    /// Идентификатор последнего прочтенного исходящего сообщения.
    public let outRead: Int64?
    
    /// Число непрочитанных сообщений.
    public let unreadCount: Int64?
    
    /// True, если диалог помечен как важный (только для сообщений сообществ).
    public let important: Bool?
    
    /// True, если диалог помечен как неотвеченный (только для сообщений сообществ).
    public let unanswered: Bool?
    
    /// Настройки Push-уведомлений.
    public struct PushSettings: Codable {
        
        /// Timestamp, до которого оповещения отключены.
        public let disabledUntil: Int64?
        
        /// Передается в случае, если оповещения отключены навсегда, содержит true.
        public let disabledForever: Bool?
        
        /// Передается в случае, если отключен звук оповещений, содержит true.
        public let noSound: Bool?
        
        public init(disabledUntil: Int64? = nil, disabledForever: Bool? = nil, noSound: Bool? = nil) {
            self.disabledUntil = disabledUntil
            self.disabledForever = disabledForever
            self.noSound = noSound
        }
    }
    
    public let pushSettings: PushSettings?
    
    /// Информация о том, может ли пользователь писать в диалог.
    public struct CanWrite: Codable {
        
        /// True, если пользователь может писать в диалог.
        public let allowed: Bool?
        
        /// Код ошибки для allowed = false. Возможные значения: 
        public enum Reason: Int64, Codable {
            /// 900 — нельзя отправить сообщение пользователю, который в чёрном списке;
            case nelza_otpravit_soobsenie_polzovatelu_kotoryj_v_cernom_spiske = 900
        
            /// 917 — нет доступа к чату;
            case net_dostupa_k_catu = 917
        
            /// 918 — нет доступа к e-mail;
            case net_dostupa_k_email = 918
        
            /// 203 — нет доступа к сообществу.
            case net_dostupa_k_soobsestvu = 203
        
            /// 18 — пользователь заблокирован или удален;
            case polzovatel_zablokirovan_ili_udalen = 18
        
            /// 902 — пользователь запретил присылать ему сообщения с помощью настроек приватности;
            case polzovatel_zapretil_prisylat_emu_soobsenia_s_pomosu_nastroek_privatnosti = 902
        
            /// 901 — пользователь запретил сообщения от сообщества;
            case polzovatel_zapretil_soobsenia_ot_soobsestva = 901
        
            /// 915 — в сообществе отключены сообщения;
            case v_soobsestve_otkluceny_soobsenia = 915
        
            /// 916 — в сообществе заблокированы сообщения;
            case v_soobsestve_zablokirovany_soobsenia = 916
        }
        
        public let reason: Reason?
        
        public init(allowed: Bool? = nil, reason: Reason? = nil) {
            self.allowed = allowed
            self.reason = reason
        }
    }
    
    public let canWrite: CanWrite?
    
    /// Настройки чата.
    public struct ChatSettings: Codable {
        
        /// Число участников.
        public let membersCount: Int64?
        
        /// Название.
        public let title: String?
        
        /// Объект закреплённого сообщения, если есть.
        public struct PinnedMessage: Codable {
            
            
            public init() {
            }
        }
        
        public let pinnedMessage: PinnedMessage?
        
        /// (string) — статус текущего пользователя. Возможные значения: 
        public enum State: String, Codable {
            /// kicked — исключён из чата;
            case kicked
        
            /// left — покинул чат.
            case left
        
            /// in — состоит в чате;
            case `in`
        }
        
        public let state: State?
        
        public init(membersCount: Int64? = nil, title: String? = nil, pinnedMessage: PinnedMessage? = nil, state: State? = nil) {
            self.membersCount = membersCount
            self.title = title
            self.pinnedMessage = pinnedMessage
            self.state = state
        }
    }
    
    public let chatSettings: ChatSettings?
    
    public init(peer: Peer? = nil, inRead: Int64? = nil, outRead: Int64? = nil, unreadCount: Int64? = nil, important: Bool? = nil, unanswered: Bool? = nil, pushSettings: PushSettings? = nil, canWrite: CanWrite? = nil, chatSettings: ChatSettings? = nil) {
        self.peer = peer
        self.inRead = inRead
        self.outRead = outRead
        self.unreadCount = unreadCount
        self.important = important
        self.unanswered = unanswered
        self.pushSettings = pushSettings
        self.canWrite = canWrite
        self.chatSettings = chatSettings
    }

}