// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.
/**
 Событие представляет собой JSON, имеющий следующую структуру:
 {"type": <тип события>, "object": <объект, инициировавший событие>, "group_id": <ID сообщества, в котором произошло событие>}
 Например:
 {"type": "group_join", "object": {"user_id": 1, "join_type" : "approved"}, "group_id": 1}
 Структура объекта в поле object зависит от типа уведомления.
 SeeAlso Telegram Bot API Reference:
 [Update](https://core.telegram.org/bots/api#update)
 */
public final class Update: Codable {

    public enum `Type`: String, Codable {
        //case message_new
        case confirmation
    }
    
    public let type: Type

    public let secretKey: String
    
    public enum Object: Codable {
        case message(_ wrapper: MessageWrapper)
        
        public struct MessageWrapper: Codable {
            public let message: Message
        }
        
        private enum CodingKeys: String, CodingKey {
            case message
        }

        enum PostTypeCodingError: Error {
            case decoding(String)
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: CodingKeys.self)
            if let value = try? values.decode(MessageWrapper.self, forKey: .message) {
                self = .message(value)
                return
            }
            throw PostTypeCodingError.decoding("Whoops! \(dump(values))")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: CodingKeys.self)
            switch self {
            case .message(let messageWrapper):
                try container.encode(messageWrapper, forKey: .message)
            }
        }
    }

    public var object: Object?
    
    public init(type: Type, secretKey: String, object: Object) {
        self.type = type
        self.secretKey = secretKey
        self.object = object
    }
}
