// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

/**
 Список объектов › Сообщество 1. Базовые поля 2. Опциональные поля A-K 3. Опциональные поля L-W Объект содержит информацию о сообществе ВКонтакте. Набор полей может меняться в зависимости от вызванного метода и переданных в нем параметров.

 SeeAlso VK API Reference:
 [Group](https://vk.com/dev/objects/group
 */
public struct Group: Codable {
    /// Идентификатор сообщества.
    public let id: UInt64
    
    /// Название сообщества.
    public let name: String
    
    /// Короткий адрес, например, apiclub.
    public let screenName: String
    
    /// Является ли сообщество закрытым.
    public enum IsClosed: Int64, Codable {
        /// 2 — частное.
        case castnoe = 2
    
        /// 0 — открытое;
        case otkrytoe = 0
    
        /// 1 — закрытое;
        case zakrytoe = 1
    }
    
    public let isClosed: IsClosed
    
    /// Возвращается в случае, если сообщество удалено или заблокировано.
    public enum Deactivated: String, Codable {
        /// deleted — сообщество удалено;
        case deleted
    
        /// banned — сообщество заблокировано;
        case banned
    }
    
    public let deactivated: Deactivated?
    
    /// Информация о том, является ли текущий пользователь руководителем.
    public enum IsAdmin: Int64, Codable {
        /// 1 — является;
        case avlaetsa = 1
    
        /// 0 — не является.
        case ne_avlaetsa = 0
    }
    
    public let isAdmin: IsAdmin
    
    /// Уровень полномочий текущего пользователя (если = ):
    public let adminLevel: Int64?
    
    /// Информация о том, является ли текущий пользователь участником.
    public enum IsMember: Int64, Codable {
        /// 1 — является;
        case avlaetsa = 1
    
        /// 0 — не является.
        case ne_avlaetsa = 0
    }
    
    public let isMember: IsMember
    
    /// Информация о том, является ли текущий пользователь рекламодателем.
    public enum IsAdvertiser: Int64, Codable {
        /// 1 — является;
        case avlaetsa = 1
    
        /// 0 — не является.
        case ne_avlaetsa = 0
    }
    
    public let isAdvertiser: IsAdvertiser
    
    /// Идентификатор пользователя, который отправил приглашение в сообщество. Поле возвращается только для метода groups.getInvites.
    public let invitedBy: Int64
    
    /// Тип сообщества:
    public let `type`: String
    
    /// URL главной фотографии с размером 50x50px.
    public let photo50: String
    
    /// URL главной фотографии с размером 100х100px.
    public let photo100: String
    
    /// URL главной фотографии в максимальном размере.
    public let photo200: String
    
    /// Строка тематики паблика. У групп возвращается строковое значение, открыта ли группа или нет, а у событий дата начала.
    public let activity: String?
    
    /// Информация об адресах сообщества.
    public struct Addresses: Codable {
        
        /// Включен ли блок адресов в сообществе.
        public let isEnabled: Bool?
        
        /// Идентификатор основного адреса.
        public let mainAddressId: Int64?
        
        public init(isEnabled: Bool? = nil, mainAddressId: Int64? = nil) {
            self.isEnabled = isEnabled
            self.mainAddressId = mainAddressId
        }
    }
    
    public let addresses: Addresses?
    
    /// Возрастное ограничение.
    public let ageLimits: Int64?
    
    /// Информация из блока ссылок сообщества.
    public struct Links: Codable {
        
        /// Идентификатор ссылки.
        public let id: Int64?
        
        /// URL.
        public let url: String?
        
        /// Название ссылки.
        public let name: String?
        
        /// Описание ссылки.
        public let desc: String?
        
        /// URL изображения-превью шириной 50px.
        public let photo50: String?
        
        /// URL изображения-превью шириной 100px. Поле возвращается только при запросе данных об одном сообществе
        public let photo100: String?
        
        public init(id: Int64? = nil, url: String? = nil, name: String? = nil, desc: String? = nil, photo50: String? = nil, photo100: String? = nil) {
            self.id = id
            self.url = url
            self.name = name
            self.desc = desc
            self.photo50 = photo50
            self.photo100 = photo100
        }
    }
    
    public let links: [Links]?
    
    /// Идентификатор основного фотоальбома.
    public let mainAlbumId: Int64?
    
    /// Информация о главной секции.
    public enum MainSection: Int64, Codable {
        /// 3 — аудиозаписи;
        case audiozapisi = 3
    
        /// 1 — фотографии;
        case fotografii = 1
    
        /// 2 — обсуждения;
        case obsuzdenia = 2
    
        /// 0 — отсутствует;
        case otsutstvuet = 0
    
        /// 5 — товары.
        case tovary = 5
    
        /// 4 — видеозаписи;
        case videozapisi = 4
    }
    
    public let mainSection: MainSection?
    
    /// Информация о магазине.
    public struct Market: Codable {
        
        /// Информация о том, включен ли блок товаров в сообществе. Возможные значения: 
        public enum Enabled: Int64, Codable {
            /// 1 — включен;
            case vklucen = 1
        
            /// 0 — выключен.
            case vyklucen = 0
        }
        
        public let enabled: Enabled?
        
        /// Информация о типе магазина. Возвращается, если в группе включен раздел "Товары". Возможные значения: 
        public enum `Type`: String, Codable {
            /// basic — базовые товары;
            case basic
        
            /// advanced — расширенные товары.
            case advanced
        }
        
        public let `type`: Type?
        
        /// Минимальная цена товаров.
        public let priceMin: Int64?
        
        /// Максимальная цена товаров.
        public let priceMax: Int64?
        
        /// Идентификатор главной подборки товаров.
        public let mainAlbumId: Int64?
        
        /// Идентификатор контактного лица для связи с продавцом. Возвращается отрицательное значение, если для связи с продавцом используются сообщения сообщества.
        public let contactId: Int64?
        
        /// Информация о валюте. Объект, содержащий поля: 
        public struct Currency: Codable {
            
            /// Идентификатор валюты.
            public let id: Int64?
            
            /// Символьное обозначение.
            public let name: String?
            
            public init(id: Int64? = nil, name: String? = nil) {
                self.id = id
                self.name = name
            }
        }
        
        public let currency: Currency?
        
        /// Строковое обозначение.
        public let currencyText: String?
        
        public init(enabled: Enabled? = nil, type: Type? = nil, priceMin: Int64? = nil, priceMax: Int64? = nil, mainAlbumId: Int64? = nil, contactId: Int64? = nil, currency: Currency? = nil, currencyText: String? = nil) {
            self.enabled = enabled
            self.type = `type`
            self.priceMin = priceMin
            self.priceMax = priceMax
            self.mainAlbumId = mainAlbumId
            self.contactId = contactId
            self.currency = currency
            self.currencyText = currencyText
        }
    }
    
    public let market: Market?
    
    /// Статус участника текущего пользователя.
    public enum MemberStatus: Int64, Codable {
        /// 1 — является участником;
        case avlaetsa_ucastnikom = 1
    
        /// 0 — не является участником;
        case ne_avlaetsa_ucastnikom = 0
    
        /// 2 — не уверен, что посетит мероприятие;
        case ne_uveren_cto_posetit_meropriatie = 2
    
        /// 3 — отклонил приглашение;
        case otklonil_priglasenie = 3
    
        /// 5 — приглашен.
        case priglasen = 5
    
        /// 4 — запрос на вступление отправлен;
        case zapros_na_vstuplenie_otpravlen = 4
    }
    
    public let memberStatus: MemberStatus?
    
    /// Количество участников в сообществе
    public let membersCount: Int64?
    
    /// Место, указанное в информации о сообществе.
    public struct Place: Codable {
        
        /// Идентификатор места.
        public let id: Int64?
        
        /// Название места.
        public let title: String?
        
        /// Географическая широта в градусах (от -90 до 90).
        public let latitude: Int64?
        
        /// Географическая долгота в градусах (от -180 до 180).
        public let longitude: Int64?
        
        /// Тип места.
        public let `type`: String?
        
        /// Идентификатор страны.
        public let country: Int64?
        
        /// Идентификатор города.
        public let city: Int64?
        
        /// Адрес.
        public let address: String?
        
        public init(id: Int64? = nil, title: String? = nil, latitude: Int64? = nil, longitude: Int64? = nil, type: String? = nil, country: Int64? = nil, city: Int64? = nil, address: String? = nil) {
            self.id = id
            self.title = title
            self.latitude = latitude
            self.longitude = longitude
            self.type = `type`
            self.country = country
            self.city = city
            self.address = address
        }
    }
    
    public let place: Place?
    
    public init(id: UInt64, name: String, screenName: String, isClosed: IsClosed, deactivated: Deactivated? = nil, isAdmin: IsAdmin, adminLevel: Int64? = nil, isMember: IsMember, isAdvertiser: IsAdvertiser, invitedBy: Int64, type: String, photo50: String, photo100: String, photo200: String, activity: String? = nil, addresses: Addresses? = nil, ageLimits: Int64? = nil, links: [Links]? = nil, mainAlbumId: Int64? = nil, mainSection: MainSection? = nil, market: Market? = nil, memberStatus: MemberStatus? = nil, membersCount: Int64? = nil, place: Place? = nil) {
        self.id = id
        self.name = name
        self.screenName = screenName
        self.isClosed = isClosed
        self.deactivated = deactivated
        self.isAdmin = isAdmin
        self.adminLevel = adminLevel
        self.isMember = isMember
        self.isAdvertiser = isAdvertiser
        self.invitedBy = invitedBy
        self.type = `type`
        self.photo50 = photo50
        self.photo100 = photo100
        self.photo200 = photo200
        self.activity = activity
        self.addresses = addresses
        self.ageLimits = ageLimits
        self.links = links
        self.mainAlbumId = mainAlbumId
        self.mainSection = mainSection
        self.market = market
        self.memberStatus = memberStatus
        self.membersCount = membersCount
        self.place = place
    }

}