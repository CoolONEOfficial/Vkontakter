// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

/**
 Список объектов › Комментарий к записи Объект, описывающий комментарий к записи, содержит следующие поля: id integer идентификатор комментария. from_id integer идентификатор автора комментария. date integer дата создания комментария в формате Unixtime. text string текст комментария. donut object информация о VK Donut. Объект со следующими полями: is_don (boolean) — является ли комментатор подписчиком VK Donut. placeholder (string) — заглушка для пользователей, которые не оформили подписку VK Donut. reply_to_user integer идентификатор пользователя или сообщества, в ответ которому оставлен текущий комментарий (если применимо). reply_to_comment integer идентификатор комментария, в ответ на который оставлен текущий (если применимо). attachments object медиавложения комментария (фотографии, ссылки и т.п.). Описание массива attachments находится на отдельной странице. parents_stack array массив идентификаторов родительских комментариев. thread object Информация о вложенной ветке комментариев, объект с полями: count (integer) — количество комментариев в ветке. items (array) — массив объектов комментариев к записи (только для метода wall.getComments). can_post (boolean) – может ли текущий пользователь оставлять комментарии в этой ветке. show_reply_button (boolean) – нужно ли отображать кнопку «ответить» в ветке. groups_can_post (boolean) – могут ли сообщества оставлять комментарии в ветке.

 SeeAlso VK API Reference:
 [Comment](https://vk.com/dev/objects/comment
 */
public final class Comment: Codable {
    /// Идентификатор комментария.
    public let id: Int64?
    
    /// Идентификатор автора комментария.
    public let fromId: Int64?
    
    /// Дата создания комментария в формате Unixtime.
    public let date: UInt64?
    
    /// Текст комментария.
    public let text: String?
    
    /// Информация о VK Donut.
    public final class Donut: Codable {
        
        /// Является ли комментатор подписчиком VK Donut.
        public let isDon: Bool?
        
        /// Заглушка для пользователей, которые не оформили подписку VK Donut.
        public let placeholder: String?
        
        public init(isDon: Bool? = nil, placeholder: String? = nil) {
            self.isDon = isDon
            self.placeholder = placeholder
        }
    }
    
    public let donut: Donut?
    
    /// Идентификатор пользователя или сообщества, в ответ которому оставлен текущий комментарий (если применимо).
    public let replyToUser: Int64?
    
    /// Идентификатор комментария, в ответ на который оставлен текущий (если применимо).
    public let replyToComment: Int64?
    
    /// Медиавложения комментария (фотографии, ссылки и т.п.). Описание массива attachments находится на отдельной странице.
    public let attachments: Attachments?
    
    /// Массив идентификаторов родительских комментариев.
    public let parentsStack: [Int64]?
    
    /// Информация о вложенной ветке комментариев,
    public final class Thread: Codable {
        
        /// Количество комментариев в ветке.
        public let count: Int64?
        
        /// Массив объектов комментариев к записи (только для метода wall.getComments).
        public final class Items: Codable {
            
            
            public init() {
            }
        }
        
        public let items: [Items]?
        
        /// Может ли текущий пользователь оставлять комментарии в этой ветке.
        public let canPost: Bool?
        
        /// Нужно ли отображать кнопку «ответить» в ветке.
        public let showReplyButton: Bool?
        
        /// Могут ли сообщества оставлять комментарии в ветке.
        public let groupsCanPost: Bool?
        
        public init(count: Int64? = nil, items: [Items]? = nil, canPost: Bool? = nil, showReplyButton: Bool? = nil, groupsCanPost: Bool? = nil) {
            self.count = count
            self.items = items
            self.canPost = canPost
            self.showReplyButton = showReplyButton
            self.groupsCanPost = groupsCanPost
        }
    }
    
    public let thread: Thread?
    
    public init(id: Int64? = nil, fromId: Int64? = nil, date: UInt64? = nil, text: String? = nil, donut: Donut? = nil, replyToUser: Int64? = nil, replyToComment: Int64? = nil, attachments: Attachments? = nil, parentsStack: [Int64]? = nil, thread: Thread? = nil) {
        self.id = id
        self.fromId = fromId
        self.date = date
        self.text = text
        self.donut = donut
        self.replyToUser = replyToUser
        self.replyToComment = replyToComment
        self.attachments = attachments
        self.parentsStack = parentsStack
        self.thread = thread
    }

}