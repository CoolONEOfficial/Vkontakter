// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

/**
 

 SeeAlso VK API Reference:
 [StatsFormat](https://vk.com/dev/objects/stats_format
 */
public struct StatsFormat: Codable {
    /// Данные об активности.
    public struct Activity: Codable {
        
        /// Количество комментариев.
        public let comments: Int64?
        
        /// Количество репостов.
        public let copies: Int64?
        
        /// Количество пользователей, скрывших записи из новостей.
        public let hidden: Int64?
        
        /// Количество отметок «нравится».
        public let likes: Int64?
        
        /// Количество подписавшихся пользователей на сообщество.
        public let subscribed: Int64?
        
        /// Количество отписавшихся пользователей на сообщество.
        public let unsubscribed: Int64?
        
        public init(comments: Int64? = nil, copies: Int64? = nil, hidden: Int64? = nil, likes: Int64? = nil, subscribed: Int64? = nil, unsubscribed: Int64? = nil) {
            self.comments = comments
            self.copies = copies
            self.hidden = hidden
            self.likes = likes
            self.subscribed = subscribed
            self.unsubscribed = unsubscribed
        }
    }
    
    public let activity: Activity?
    
    /// Период начала отсчёта в формате Unixtime.
    public let periodFrom: UInt64?
    
    /// Период окончания отсчёта в формате Unixtime.
    public let periodTo: UInt64?
    
    /// Данные о посетителях и просмотрах.
    public struct Visitors: Codable {
        
        /// Число просмотров.
        public let views: Int64?
        
        /// Число посетителей.
        public let visitors: Int64?
        
        public init(views: Int64? = nil, visitors: Int64? = nil) {
            self.views = views
            self.visitors = visitors
        }
    }
    
    public let visitors: Visitors?
    
    /// Данные об охвате.
    public struct Reach: Codable {
        
        /// Полный охват.
        public let reach: Int64?
        
        /// Охват подписчиков.
        public let reachSubscribers: Int64?
        
        /// Охват с мобильных устройств.
        public let mobileReach: Int64?
        
        /// Статистика по полу. Массив объектов, каждый из которых содержит поля: 
        public struct Sex: Codable {
            
            /// Пол ("m" — мужской, "f" — женский).
            public let value: String?
            
            /// Число посетителей.
            public let count: Int64?
            
            public init(value: String? = nil, count: Int64? = nil) {
                self.value = value
                self.count = count
            }
        }
        
        public let sex: [Sex]?
        
        /// Статистика по возрасту. Массив объектов, каждый из которых содержит поля: 
        public struct Age: Codable {
            
            /// Возрастной интервал (например, "12-18"). Возможные значения: 12-18, 18-21, 21-24, 24-27, 27-30, 30-35, 35-45, 45-100.
            public enum Value: String, Codable {
                /// 12-18
                case _1218 = "12-18"
            
                /// 18-21
                case _1821 = "18-21"
            
                /// 21-24
                case _2124 = "21-24"
            
                /// 24-27
                case _2427 = "24-27"
            
                /// 27-30
                case _2730 = "27-30"
            
                /// 30-35
                case _3035 = "30-35"
            
                /// 35-45
                case _3545 = "35-45"
            
                /// 45-100
                case _45100 = "45-100"
            }
            
            public let value: Value?
            
            /// Число посетителей.
            public let count: Int64?
            
            public init(value: Value? = nil, count: Int64? = nil) {
                self.value = value
                self.count = count
            }
        }
        
        public let age: [Age]?
        
        /// Статистика по полу и возрасту. Массив объектов, каждый из которых содержит поля: 
        public struct SexAge: Codable {
            
            /// Пол и возрастной интервал (например, "f.12-18").
            public let value: String?
            
            /// Число посетителей.
            public let count: Int64?
            
            public init(value: String? = nil, count: Int64? = nil) {
                self.value = value
                self.count = count
            }
        }
        
        public let sexAge: [SexAge]?
        
        /// Статистика по городам. Массив объектов, каждый из которых содержит поля: 
        public struct Cities: Codable {
            
            /// Название города.
            public let name: String?
            
            /// Идентификатор города или "other" для раздела «прочие города».
            public let cityId: String?
            
            /// Число посетителей.
            public let count: Int64?
            
            public init(name: String? = nil, cityId: String? = nil, count: Int64? = nil) {
                self.name = name
                self.cityId = cityId
                self.count = count
            }
        }
        
        public let cities: [Cities]?
        
        /// Статистика по странам. Массив объектов, каждый из которых содержит поля: 
        public struct Countries: Codable {
            
            /// Название страны.
            public let name: String?
            
            /// Двухбуквенный код страны (например, "RU").
            public let code: String?
            
            /// Идентификатор страны.
            public let countryId: Int64?
            
            /// Число посетителей.
            public let count: Int64?
            
            public init(name: String? = nil, code: String? = nil, countryId: Int64? = nil, count: Int64? = nil) {
                self.name = name
                self.code = code
                self.countryId = countryId
                self.count = count
            }
        }
        
        public let countries: [Countries]?
        
        public init(reach: Int64? = nil, reachSubscribers: Int64? = nil, mobileReach: Int64? = nil, sex: [Sex]? = nil, age: [Age]? = nil, sexAge: [SexAge]? = nil, cities: [Cities]? = nil, countries: [Countries]? = nil) {
            self.reach = reach
            self.reachSubscribers = reachSubscribers
            self.mobileReach = mobileReach
            self.sex = sex
            self.age = age
            self.sexAge = sexAge
            self.cities = cities
            self.countries = countries
        }
    }
    
    public let reach: Reach?
    
    public init(activity: Activity? = nil, periodFrom: UInt64? = nil, periodTo: UInt64? = nil, visitors: Visitors? = nil, reach: Reach? = nil) {
        self.activity = activity
        self.periodFrom = periodFrom
        self.periodTo = periodTo
        self.visitors = visitors
        self.reach = reach
    }

}