// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

/**
 Объект, описывающий историю,

 SeeAlso VK API Reference:
 [Story](https://vk.com/dev/objects/story
 */
public final class Story: Codable {
    /// Идентификатор истории.
    public let id: Int64?
    
    /// Идентификатор владельца истории.
    public let ownerId: Int64?
    
    /// Дата добавления в Unixtime.
    public let date: UInt64?
    
    /// Дата в Unixtime, когда история истечёт.
    public let expiresAt: UInt64?
    
    /// , если срок хранения истории истёк. В этом случае объект истории содержит только поля , , , , .
    public final class IsExpired: Codable {
        
        
        public init() {
        }
    }
    
    let isExpired: IsExpired?
    
    /// , если история удалена или не существует. В этом случае объект истории содержит только поля , , .
    public final class IsDeleted: Codable {
        
        
        public init() {
        }
    }
    
    let isDeleted: IsDeleted?
    
    /// Информация о том, может ли пользователь просмотреть историю ( — нет, — да). Если = , объект истории содержит только поля , , , , , .
    public let canSee: VkFlag?
    
    /// , если история просмотрена текущим пользователем.
    public let seen: Int64?
    
    /// Тип истории.
    public enum `Type`: String, Codable {
        case fotografia = "photo"
        case videozapis = "video"
    }
    
    let `type`: Type?
    
    /// (для = ). Фотография из истории. Поля объекта описаны .
    public final class Photo: Codable {
        
        
        public init() {
        }
    }
    
    let photo: Photo?
    
    /// (для = ). Видео из истории. Поля объекта описаны . Содержит дополнительные поля , , , , содержащие URL изображения-первого кадра видео с соответствующей шириной, и поле — информация о том, приватная ли история ( — нет, — да).
    public final class Video: Codable {
        
        
        public init() {
        }
    }
    
    let video: Video?
    
    /// Ссылка для перехода из истории.
    public final class Link: Codable {
        
        /// Текст ссылки.
        public let text: String?
        
        /// URL для перехода.
        public let url: String?
        
        public init(text: String? = nil, url: String? = nil) {
            self.text = text
            self.url = url
        }
    }
    
    let link: Link?
    
    /// Идентификатор пользователя, загрузившего историю, ответом на которую является текущая.
    public let parentStoryOwnerId: Int64?
    
    /// Идентификатор истории, ответом на которую является текущая.
    public let parentStoryId: Int64?
    
    /// Объект родительской истории.
    public final class ParentStory: Codable {
        
        
        public init() {
        }
    }
    
    let parentStory: ParentStory?
    
    /// Информация об ответах на текущую историю. Объект, который содержит поля: Получить истории-ответы можно методом .
    public final class Replies: Codable {
        
        /// Число ответов.
        public let count: Int64?
        
        /// Число новых ответов. Возвращается только для историй текущего пользователя.
        public let new: Int64?
        
        public init(count: Int64? = nil, new: Int64? = nil) {
            self.count = count
            self.new = new
        }
    }
    
    let replies: Replies?
    
    /// Информация о том, может ли пользователь ответить на историю ( — нет, — да).
    public let canReply: VkFlag?
    
    /// Информация о том, может ли пользователь расшарить историю ( — нет, — да).
    public let canShare: VkFlag?
    
    /// Информация о том, может ли пользователь комментировать историю ( — нет, — да).
    public let canComment: VkFlag?
    
    /// Объект .
    public final class ClickableStickers: Codable {
        
        
        public init() {
        }
    }
    
    let clickableStickers: ClickableStickers?
    
    /// Число просмотров.
    public let views: Int64?
    
    /// Ключ доступа для приватного объекта.
    public final class AccessKey: Codable {
        
        
        public init() {
        }
    }
    
    let accessKey: AccessKey?
    
    public init(id: Int64? = nil, ownerId: Int64? = nil, date: UInt64? = nil, expiresAt: UInt64? = nil, isExpired: IsExpired? = nil, isDeleted: IsDeleted? = nil, canSee: VkFlag? = nil, seen: Int64? = nil, type: Type? = nil, photo: Photo? = nil, video: Video? = nil, link: Link? = nil, parentStoryOwnerId: Int64? = nil, parentStoryId: Int64? = nil, parentStory: ParentStory? = nil, replies: Replies? = nil, canReply: VkFlag? = nil, canShare: VkFlag? = nil, canComment: VkFlag? = nil, clickableStickers: ClickableStickers? = nil, views: Int64? = nil, accessKey: AccessKey? = nil) {
        self.id = id
        self.ownerId = ownerId
        self.date = date
        self.expiresAt = expiresAt
        self.isExpired = isExpired
        self.isDeleted = isDeleted
        self.canSee = canSee
        self.seen = seen
        self.type = `type`
        self.photo = photo
        self.video = video
        self.link = link
        self.parentStoryOwnerId = parentStoryOwnerId
        self.parentStoryId = parentStoryId
        self.parentStory = parentStory
        self.replies = replies
        self.canReply = canReply
        self.canShare = canShare
        self.canComment = canComment
        self.clickableStickers = clickableStickers
        self.views = views
        self.accessKey = accessKey
    }

}