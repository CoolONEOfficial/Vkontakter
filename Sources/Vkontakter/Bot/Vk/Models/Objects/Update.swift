// Telegrammer - Telegram Bot Swift SDK.
// This file is autogenerated by API/generate_wrappers.rb script.
/**
 Событие представляет собой JSON, имеющий следующую структуру:
 {"type": <тип события>, "object": <объект, инициировавший событие>, "group_id": <ID сообщества, в котором произошло событие>}
 Например:
 {"type": "group_join", "object": {"user_id": 1, "join_type" : "approved"}, "group_id": 1}
 Структура объекта в поле object зависит от типа уведомления.
 SeeAlso Telegram Bot API Reference:
 [Update](https://core.telegram.org/bots/api#update)
 */
public final class Update: Codable {

    public enum `Type`: String, Codable {
        case message_new
        case message_event
        case confirmation
    }
    
    let type: Type

    public let secret: String?
    
    public enum Object: Codable {
        case message(_ wrapper: MessageWrapper)
        case event(_ event: MessageEvent)
        
        public struct MessageWrapper: Codable {
            public let message: Message
            
            public init(_ message: Message) {
                self.message = message
            }
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: CodingKeys.self)
            
            if let messageWrapper = try? MessageWrapper(from: decoder) {
                self = .message(messageWrapper)
            } else if let messageEvent = try? MessageEvent(from: decoder) {
                self = .event(messageEvent)
            } else {
                throw DecodingError.dataCorrupted(DecodingError.Context(codingPath: container.codingPath, debugDescription: "Data doesn't match"))
            }
        }

        public func encode(to encoder: Encoder) throws {
            switch self {
            case let .message(messageWrapper):
                try messageWrapper.encode(to: encoder)
            case let .event(event):
                try event.encode(to: encoder)
            }
        }
    }

    public let object: Object?
    
    public init(type: Type, secretKey: String, object: Object) {
        self.type = type
        self.secret = secretKey
        self.object = object
    }
}
