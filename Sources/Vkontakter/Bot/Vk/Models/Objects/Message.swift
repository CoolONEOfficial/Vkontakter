// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

/**
 Список объектов › Личное сообщение Для версии API с 5.80 Для версий API ниже 5.80

 SeeAlso VK API Reference:
 [Message](https://vk.com/dev/objects/message
 */
public final class Message: Codable {
    /// Идентификатор сообщения.
    public let id: Int64?
    
    /// Время отправки в Unixtime.
    public let date: UInt64?
    
    /// Идентификатор назначения.
    public let peerId: Int64?
    
    /// Идентификатор отправителя.
    public let fromId: Int64?
    
    /// Текст сообщения.
    public let text: String?
    
    /// Идентификатор, используемый при отправке сообщения. Возвращается только для исходящих сообщений.
    public let randomId: Int64?
    
    /// Произвольный параметр для работы с .
    public let ref: String?
    
    /// Произвольный параметр для работы с .
    public let refSource: String?
    
    /// Медиавложения сообщения (фотографии, ссылки и т.п.). Описание массива находится .
    public let attachments: [Attachment]?
    
    /// , если сообщение помечено как важное.
    public let important: Bool?
    
    /// Информация о местоположении ,
    public final class Geo: Codable {
        
        /// Тип места.
        public let `type`: String?
        
        /// Координаты места, Объект, который содержит поля: latitude (float) — географическая широта. longitude (float) — географическая долгота.
        public final class Coordinates: Codable {
            
            /// Географическая широта.
            public let latitude: Double?
            
            /// Географическая долгота.
            public let longitude: Double?
            
            public init(latitude: Double? = nil, longitude: Double? = nil) {
                self.latitude = latitude
                self.longitude = longitude
            }
        }
        
        let coordinates: Coordinates?
        
        /// Описание места (если оно добавлено), объект с полями: id (integer) — идентификатор места (если назначено). title (string) — название места (если назначено). latitude (number) — географическая широта. longitude (number) — географическая долгота. created (integer) — дата создания (если назначено). icon (string) — URL изображения-иконки. country (string) — название страны. city (string) — название города.
        public final class Place: Codable {
            
            /// Идентификатор места (если назначено).
            public let id: Int64?
            
            /// Название места (если назначено).
            public let title: String?
            
            /// Географическая широта.
            public let latitude: Int64?
            
            /// Географическая долгота.
            public let longitude: Int64?
            
            /// Дата создания (если назначено).
            public let created: Int64?
            
            /// URL изображения-иконки.
            public let icon: String?
            
            /// Название страны.
            public let country: String?
            
            /// Название города.
            public let city: String?
            
            public init(id: Int64? = nil, title: String? = nil, latitude: Int64? = nil, longitude: Int64? = nil, created: Int64? = nil, icon: String? = nil, country: String? = nil, city: String? = nil) {
                self.id = id
                self.title = title
                self.latitude = latitude
                self.longitude = longitude
                self.created = created
                self.icon = icon
                self.country = country
                self.city = city
            }
        }
        
        let place: Place?
        
        /// Информация о том, отображается ли карта.
        public let showmap: Int64?
        
        public init(type: String? = nil, coordinates: Coordinates? = nil, place: Place? = nil, showmap: Int64? = nil) {
            self.type = `type`
            self.coordinates = coordinates
            self.place = place
            self.showmap = showmap
        }
    }
    
    let geo: Geo?
    
    /// Сервисное поле для сообщений ботам (полезная нагрузка).
    public let payload: String?
    
    /// Для ботов.
    public final class Keyboard: Codable {
        
        
        public init() {
        }
    }
    
    let keyboard: Keyboard?
    
    /// Массив пересланных сообщений (если есть). Максимальное количество элементов — . Максимальная глубина вложенности для пересланных сообщений — , общее максимальное количество в цепочке с учетом вложенности — .
    public let fwdMessages: Message?
    
    /// Сообщение, в ответ на которое отправлено текущее.
    public let replyMessage: Message?
    
    /// Информация о сервисном действии с чатом.
    public final class Action: Codable {
        
        /// Тип действия. Возможные значения: chat_photo_update — обновлена фотография беседы. chat_photo_remove — удалена фотография беседы. chat_create — создана беседа. chat_title_update — обновлено название беседы. chat_invite_user — приглашен пользователь. chat_kick_user — исключен пользователь. chat_pin_message — закреплено сообщение. chat_unpin_message — откреплено сообщение. chat_invite_user_by_link — пользователь присоединился к беседе по ссылке.
        public enum `Type`: String, Codable {
            case priglasen_polzovatel = "chat_invite_user"
            case polzovatel_prisoedinilsa_k_besede_po_ssylke = "chat_invite_user_by_link"
            case isklucen_polzovatel = "chat_kick_user"
            case otkrepleno_soobsenie = "chat_unpin_message"
            case obnovlena_fotografia_besedy = "chat_photo_update"
            case sozdana_beseda = "chat_create"
            case udalena_fotografia_besedy = "chat_photo_remove"
            case obnovleno_nazvanie_besedy = "chat_title_update"
            case zakrepleno_soobsenie = "chat_pin_message"
        }
        
        let `type`: Type?
        
        /// Идентификатор пользователя (если > 0) или email (если < 0), которого пригласили или исключили (для служебных сообщений с type = chat_invite_user или chat_kick_user). Идентификатор пользователя, который закрепил/открепил сообщение для action = chat_pin_message или chat_unpin_message.
        public let memberId: Int64?
        
        /// Название беседы (для служебных сообщений с type = chat_create или chat_title_update).
        public let text: String?
        
        /// Email, который пригласили или исключили (для служебных сообщений с type = chat_invite_user или chat_kick_user и отрицательным member_id).
        public let email: String?
        
        /// Изображение-обложка чата. Объект, который содержит поля: photo_50 (string) — URL изображения 50x50px. photo_100 (string) — URL изображения 100x100px. photo_200 (string) — URL изображения 200x200px.
        public final class Photo: Codable {
            
            /// URL изображения 50x50px.
            public let photo50: String?
            
            /// URL изображения 100x100px.
            public let photo100: String?
            
            /// URL изображения 200x200px.
            public let photo200: String?
            
            public init(photo50: String? = nil, photo100: String? = nil, photo200: String? = nil) {
                self.photo50 = photo50
                self.photo100 = photo100
                self.photo200 = photo200
            }
        }
        
        let photo: Photo?
        
        public init(type: Type? = nil, memberId: Int64? = nil, text: String? = nil, email: String? = nil, photo: Photo? = nil) {
            self.type = `type`
            self.memberId = memberId
            self.text = text
            self.email = email
            self.photo = photo
        }
    }
    
    let action: Action?
    
    /// Только для сообщений сообщества. Содержит идентификатор пользователя (администратора сообщества), отправившего это сообщение.
    public let adminAuthorId: Int64?
    
    /// Уникальный автоматически увеличивающийся номер для всех сообщений с этим peer.
    public let conversationMessageId: Int64?
    
    /// Это сообщение обрезано для бота.
    public let isCropped: Bool?
    
    /// Количество участников.
    public let membersCount: Int64?
    
    /// Дата, когда сообщение было обновлено в Unixtime.
    public let updateTime: UInt64?
    
    /// Было ли вложенное аудиосообщение уже прослушано вами.
    public let wasListened: Bool?
    
    /// Дата, когда сообщение было закреплено в Unixtime.
    public let pinnedAt: UInt64?
    
    public init(id: Int64? = nil, date: UInt64? = nil, peerId: Int64? = nil, fromId: Int64? = nil, text: String? = nil, randomId: Int64? = nil, ref: String? = nil, refSource: String? = nil, attachments: [Attachment]? = nil, important: Bool? = nil, geo: Geo? = nil, payload: String? = nil, keyboard: Keyboard? = nil, fwdMessages: Message? = nil, replyMessage: Message? = nil, action: Action? = nil, adminAuthorId: Int64? = nil, conversationMessageId: Int64? = nil, isCropped: Bool? = nil, membersCount: Int64? = nil, updateTime: UInt64? = nil, wasListened: Bool? = nil, pinnedAt: UInt64? = nil) {
        self.id = id
        self.date = date
        self.peerId = peerId
        self.fromId = fromId
        self.text = text
        self.randomId = randomId
        self.ref = ref
        self.refSource = refSource
        self.attachments = attachments
        self.important = important
        self.geo = geo
        self.payload = payload
        self.keyboard = keyboard
        self.fwdMessages = fwdMessages
        self.replyMessage = replyMessage
        self.action = action
        self.adminAuthorId = adminAuthorId
        self.conversationMessageId = conversationMessageId
        self.isCropped = isCropped
        self.membersCount = membersCount
        self.updateTime = updateTime
        self.wasListened = wasListened
        self.pinnedAt = pinnedAt
    }

}