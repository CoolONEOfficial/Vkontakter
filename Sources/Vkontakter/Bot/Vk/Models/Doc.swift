// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

/**
 Объект, описывающий документ,

 SeeAlso VK API Reference:
 [Doc](https://vk.com/dev/objects/doc
 */
public struct Doc: Codable {
    /// Идентификатор документа.
    public let id: Int64?
    
    /// Идентификатор пользователя, загрузившего документ.
    public let ownerId: Int64?
    
    /// Название документа.
    public let title: String?
    
    /// Размер документа в байтах.
    public let size: Int64?
    
    /// Расширение документа.
    public let ext: String?
    
    /// Адрес документа, по которому его можно загрузить.
    public let url: String?
    
    /// Дата добавления в формате Unixtime.
    public let date: UInt64?
    
    /// Тип документа.
    public enum `Type`: Int64, Codable {
        /// 2 — архивы;
        case arhivy = 2
    
        /// 5 — аудио;
        case audio = 5
    
        /// 7 — электронные книги;
        case elektronnye_knigi = 7
    
        /// 3 — gif;
        case gif = 3
    
        /// 4 — изображения;
        case izobrazenia = 4
    
        /// 8 — неизвестно.
        case neizvestno = 8
    
        /// 1 — текстовые документы;
        case tekstovye_dokumenty = 1
    
        /// 6 — видео;
        case video = 6
    }
    
    public let `type`: Type?
    
    /// Информация для предварительного просмотра документа.
    public struct Preview: Codable {
        
        /// Изображения для предпросмотра. Содержит единственное поле: 
        public struct Photo: Codable {
            
            /// Массив копий изображения в разных размерах. Подробное описание структуры Вы найдете на этой странице.
            public let sizes: [PhotoSize]?
            
            public init(sizes: [PhotoSize]? = nil) {
                self.sizes = sizes
            }
        }
        
        public let photo: Photo?
        
        /// Данные о граффити. Содержит следующие поля: 
        public struct Graffiti: Codable {
            
            /// URL документа с граффити.
            public let src: String?
            
            /// Ширина изображения в px.
            public let width: Int64?
            
            /// Высота изображения в px.
            public let height: Int64?
            
            public init(src: String? = nil, width: Int64? = nil, height: Int64? = nil) {
                self.src = src
                self.width = width
                self.height = height
            }
        }
        
        public let graffiti: Graffiti?
        
        /// Данные об аудиосообщении. Объект, который содержит следующие поля: 
        public struct AudioMessage: Codable {
            
            /// Длительность аудиосообщения в секундах.
            public let duration: Int64?
            
            /// Массив значений (integer) для визуального отображения звука.
            public let waveform: [Int64]?
            
            /// URL .ogg-файла.
            public let linkOgg: String?
            
            /// URL .mp3-файла.
            public let linkMp3: String?
            
            public init(duration: Int64? = nil, waveform: [Int64]? = nil, linkOgg: String? = nil, linkMp3: String? = nil) {
                self.duration = duration
                self.waveform = waveform
                self.linkOgg = linkOgg
                self.linkMp3 = linkMp3
            }
        }
        
        public let audioMessage: AudioMessage?
        
        public init(photo: Photo? = nil, graffiti: Graffiti? = nil, audioMessage: AudioMessage? = nil) {
            self.photo = photo
            self.graffiti = graffiti
            self.audioMessage = audioMessage
        }
    }
    
    public let preview: Preview?
    
    /// При получении объектов, прямого доступа к которым может не быть, например, фотографий или видео в новостях, вместе с объектами приходит поле access_key, которое необходимо передавать при получении этих объектов напрямую или при совершении с ними действий. 
    public let accessKey: String?
    
    public init(id: Int64? = nil, ownerId: Int64? = nil, title: String? = nil, size: Int64? = nil, ext: String? = nil, url: String? = nil, date: UInt64? = nil, type: Type? = nil, preview: Preview? = nil, accessKey: String? = nil) {
        self.id = id
        self.ownerId = ownerId
        self.title = title
        self.size = size
        self.ext = ext
        self.url = url
        self.date = date
        self.type = `type`
        self.preview = preview
        self.accessKey = accessKey
    }

}