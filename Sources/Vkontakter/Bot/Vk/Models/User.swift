// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

/**
 Объект содержит информацию о пользователе ВКонтакте. Набор полей может меняться в зависимости от вызванного метода и переданных в нем параметров. Обратите внимание — все поля использующие информацию о текущем пользователе (например, ) требуют передачи ключа доступа пользователя в запросе, даже если сам метод можно вызывать без ключа доступа.

 SeeAlso VK API Reference:
 [User](https://vk.com/dev/objects/user
 */
public final class User: Codable {
    
    struct Career: Codable {
    
        /// Идентификатор сообщества (если доступно, иначе company).
        let groupId: Int64?
        
        /// Название компании (если доступно, иначе group_id).
        let company: String?
        
        /// Идентификатор страны.
        let countryId: Int64?
        
        /// Идентификатор города (если доступно, иначе city_name).
        let cityId: Int64?
        
        /// Название города (если доступно, иначе city_id).
        let cityName: String?
        
        /// Год начала работы.
        let from: Int64?
        
        /// Год окончания работы.
        let until: Int64?
        
        /// Должность.
        let position: String?
        
        public init(groupId: Int64? = nil, company: String? = nil, countryId: Int64? = nil, cityId: Int64? = nil, cityName: String? = nil, from: Int64? = nil, until: Int64? = nil, position: String? = nil) {
            self.groupId = groupId
            self.company = company
            self.countryId = countryId
            self.cityId = cityId
            self.cityName = cityName
            self.from = from
            self.until = until
            self.position = position
        }
    }
    
    struct City: Codable {
    
        /// Идентификатор города, который можно использовать для получения его названия с помощью метода database.getCitiesById.
        let id: Int64?
        
        /// Название города.
        let title: String?
        
        public init(id: Int64? = nil, title: String? = nil) {
            self.id = id
            self.title = title
        }
    }
    
    struct Contacts: Codable {
    
        /// Номер мобильного телефона пользователя (только для Standalone-приложений).
        let mobilePhone: String?
        
        /// Дополнительный номер телефона пользователя.
        let homePhone: String?
        
        public init(mobilePhone: String? = nil, homePhone: String? = nil) {
            self.mobilePhone = mobilePhone
            self.homePhone = homePhone
        }
    }
    
    struct Counters: Codable {
    
        /// Количество фотоальбомов.
        let albums: Int64?
        
        /// Количество видеозаписей.
        let videos: Int64?
        
        /// Количество аудиозаписей.
        let audios: Int64?
        
        /// Количество фотографий.
        let photos: Int64?
        
        /// Количество заметок.
        let notes: Int64?
        
        /// Количество друзей.
        let friends: Int64?
        
        /// Количество сообществ.
        let groups: Int64?
        
        /// Количество друзей онлайн.
        let onlineFriends: Int64?
        
        /// Количество общих друзей.
        let mutualFriends: Int64?
        
        /// Количество видеозаписей с пользователем.
        let userVideos: Int64?
        
        /// Количество подписчиков.
        let followers: Int64?
        
        /// Количество объектов в блоке «Интересные страницы».
        let pages: Int64?
        
        public init(albums: Int64? = nil, videos: Int64? = nil, audios: Int64? = nil, photos: Int64? = nil, notes: Int64? = nil, friends: Int64? = nil, groups: Int64? = nil, onlineFriends: Int64? = nil, mutualFriends: Int64? = nil, userVideos: Int64? = nil, followers: Int64? = nil, pages: Int64? = nil) {
            self.albums = albums
            self.videos = videos
            self.audios = audios
            self.photos = photos
            self.notes = notes
            self.friends = friends
            self.groups = groups
            self.onlineFriends = onlineFriends
            self.mutualFriends = mutualFriends
            self.userVideos = userVideos
            self.followers = followers
            self.pages = pages
        }
    }
    
    struct Country: Codable {
    
        /// Идентификатор страны, который можно использовать для получения ее названия с помощью метода database.getCountriesById.
        let id: Int64?
        
        /// Название страны.
        let title: String?
        
        public init(id: Int64? = nil, title: String? = nil) {
            self.id = id
            self.title = title
        }
    }
    
    struct CropPhoto: Codable {
        struct Crop: Codable {
        
            /// Координата X левого верхнего угла в процентах.
            let x: Int64?
            
            /// Координата Y левого верхнего угла в процентах.
            let y: Int64?
            
            /// Координата X правого нижнего угла в процентах.
            let x2: Int64?
            
            /// Координата Y правого нижнего угла в процентах.
            let y2: Int64?
            
            public init(x: Int64? = nil, y: Int64? = nil, x2: Int64? = nil, y2: Int64? = nil) {
                self.x = x
                self.y = y
                self.x2 = x2
                self.y2 = y2
            }
        }
        
        struct Rect: Codable {
        
            
        }
        
    
        /// Объект photo фотографии пользователя, из которой вырезается главное фото профиля.
        let photo: VkPhoto?
        
        /// Вырезанная фотография пользователя. Содержит следующие поля: x (number) — координата X левого верхнего угла в процентах. y (number) — координата Y левого верхнего угла в процентах. x2 (number) — координата X правого нижнего угла в процентах. y2 (number) — координата Y правого нижнего угла в процентах.
        let crop: Crop?
        
        /// Миниатюрная квадратная фотография, вырезанная из фотографии crop. Содержит набор полей, аналогичный объекту crop.
        let rect: Rect?
        
        public init(photo: VkPhoto? = nil, crop: Crop? = nil, rect: Rect? = nil) {
            self.photo = photo
            self.crop = crop
            self.rect = rect
        }
    }
    
    struct Education: Codable {
    
        /// Идентификатор университета.
        let university: Int64?
        
        /// Название университета.
        let universityName: String?
        
        /// Идентификатор факультета.
        let faculty: Int64?
        
        /// Название факультета.
        let facultyName: String?
        
        /// Год окончания.
        let graduation: Int64?
        
        public init(university: Int64? = nil, universityName: String? = nil, faculty: Int64? = nil, facultyName: String? = nil, graduation: Int64? = nil) {
            self.university = university
            self.universityName = universityName
            self.faculty = faculty
            self.facultyName = facultyName
            self.graduation = graduation
        }
    }
    
    struct LastSeen: Codable {
        enum Platform: Int64, Codable {
            case prilozenie_dla_ipad = 3
            case prilozenie_dla_iphone = 2
            case prilozenie_dla_android = 4
            case mobilnaa_versia = 1
            case polnaa_versia_sajta = 7
            case prilozenie_dla_windows_phone = 5
            case prilozenie_dla_windows_10 = 6
        }
        
    
        /// Время последнего посещения в формате Unixtime.
        let time: Int64?
        
        /// Тип платформы. Возможные значения: 1 — мобильная версия. 2 — приложение для iPhone. 3 — приложение для iPad. 4 — приложение для Android. 5 — приложение для Windows Phone. 6 — приложение для Windows 10. 7 — полная версия сайта.
        let platform: Platform?
        
        public init(time: Int64? = nil, platform: Platform? = nil) {
            self.time = time
            self.platform = platform
        }
    }
    
    
    enum FirstName: String, Codable {
        case vinitelnyj = "acc"
        case imenitelnyj = "nom"
        case tvoritelnyj = "ins"
        case roditelnyj = "gen"
        case predloznyj = "abl"
        case datelnyj = "dat"
    }
    
    enum FriendStatus: Int64, Codable {
        case imeetsa_vhodasaa_zaavkapodpiska_ot_polzovatela = 2
        case ne_avlaetsa_drugom = 0
        case otpravlena_zaavkapodpiska_polzovatelu = 1
        case avlaetsa_drugom = 3
    }
    
    enum LastName: String, Codable {
        case vinitelnyj = "acc"
        case predloznyj = "abl"
        case imenitelnyj = "nom"
        case roditelnyj = "gen"
        case datelnyj = "dat"
        case tvoritelnyj = "ins"
    }
    
    /// Идентификатор пользователя.
    let id: Int64
    
    /// Имя.
    let firstName: String
    
    /// Фамилия.
    let lastName: String
    
    /// Поле возвращается, если страница пользователя удалена или заблокирована, содержит значение или . В этом случае опциональные поля не возвращаются.
    let deactivated: String
    
    /// Скрыт ли профиль пользователя настройками приватности.
    let isClosed: Bool
    
    /// Может ли текущий пользователь видеть профиль при = (например, он есть в друзьях).
    let canAccessClosed: Bool
    
    /// Содержимое поля «О себе» из профиля.
    let about: String?
    
    /// Содержимое поля «Деятельность» из профиля.
    let activities: String?
    
    /// Дата рождения. Возвращается в формате или (если год рождения скрыт). Если дата рождения скрыта целиком, поле отсутствует в ответе.
    let bdate: String?
    
    /// Информация о том, находится ли текущий пользователь в черном списке.
    let blacklisted: VkFlag?
    
    /// Информация о том, находится ли пользователь в черном списке у текущего пользователя.
    let blacklistedByMe: VkFlag?
    
    /// Содержимое поля «Любимые книги» из профиля пользователя.
    let books: String?
    
    /// Информация о том, может ли текущий пользователь оставлять записи на стене.
    let canPost: VkFlag?
    
    /// Информация о том, может ли текущий пользователь видеть чужие записи на стене.
    let canSeeAllPosts: VkFlag?
    
    /// Информация о том, может ли текущий пользователь видеть аудиозаписи.
    let canSeeAudio: VkFlag?
    
    /// Информация о том, будет ли отправлено уведомление пользователю о заявке в друзья от текущего пользователя.
    let canSendFriendRequest: VkFlag?
    
    /// Информация о том, может ли текущий пользователь отправить личное сообщение.
    let canWritePrivateMessage: VkFlag?
    
    /// Информация о карьере пользователя.
    let career: Career?
    
    /// Информация о городе, указанном на странице пользователя в разделе «Контакты».
    let city: City?
    
    /// Количество общих друзей с текущим пользователем.
    let commonCount: Int64?
    
    /// Возвращает данные об указанных в профиле сервисах пользователя, таких как: skype, facebook, twitter, livejournal, instagram. Для каждого сервиса возвращается отдельное поле с типом , содержащее никнейм пользователя. Например, .
    let connections: [String: String]?
    
    /// Информация о телефонных номерах пользователя.
    let contacts: Contacts?
    
    /// Количество различных объектов у пользователя. Поле возвращается только в методе при запросе информации об одном пользователе, с передачей пользовательского .
    let counters: Counters?
    
    /// Информация о стране, указанной на странице пользователя в разделе «Контакты».
    let country: Country?
    
    /// Возвращает данные о точках, по которым вырезаны профильная и миниатюрная фотографии пользователя, при наличии.
    let cropPhoto: CropPhoto?
    
    /// Короткий адрес страницы. Возвращается строка, содержащая короткий адрес страницы (например, ). Если он не назначен, возвращается +, например, .
    let domain: String?
    
    /// Информация о высшем учебном заведении пользователя.
    let education: Education?
    
    /// Внешние сервисы, в которые настроен экспорт из ВК ().
    let exports: String?
    
    /// Имя в заданном падеже.
    let firstNameCase: FirstName?
    
    /// Количество подписчиков пользователя.
    let followersCount: Int64?
    
    /// Статус дружбы с пользователем.
    let friendStatus: FriendStatus?
    
    /// Содержимое поля «Любимые игры» из профиля.
    let games: String?
    
    /// Информация о том, известен ли номер мобильного телефона пользователя. Возвращаемые значения: — известен, — не известен.
    let hasMobile: VkFlag?
    
    /// , если пользователь установил фотографию для профиля.
    let hasPhoto: VkFlag?
    
    /// Название родного города.
    let homeTown: String?
    
    /// Содержимое поля «Интересы» из профиля.
    let interests: String?
    
    /// Информация о том, есть ли пользователь в закладках у текущего пользователя.
    let isFavorite: VkFlag?
    
    /// Информация о том, является ли пользователь другом текущего пользователя.
    let isFriend: VkFlag?
    
    /// Информация о том, скрыт ли пользователь из ленты новостей текущего пользователя.
    let isHiddenFromFeed: VkFlag?
    
    /// Фамилия в заданном падеже.
    let lastNameCase: LastName?
    
    /// Время последнего посещения.
    let lastSeen: LastSeen?
    
    /// Разделенные запятой идентификаторы списков друзей, в которых состоит пользователь. Поле доступно только для метода .
    let lists: String?
    
    
    public init(id: Int64, firstName: String, lastName: String, deactivated: String, isClosed: Bool, canAccessClosed: Bool, about: String? = nil, activities: String? = nil, bdate: String? = nil, blacklisted: VkFlag? = nil, blacklistedByMe: VkFlag? = nil, books: String? = nil, canPost: VkFlag? = nil, canSeeAllPosts: VkFlag? = nil, canSeeAudio: VkFlag? = nil, canSendFriendRequest: VkFlag? = nil, canWritePrivateMessage: VkFlag? = nil, career: Career? = nil, city: City? = nil, commonCount: Int64? = nil, connections: [String: String]? = nil, contacts: Contacts? = nil, counters: Counters? = nil, country: Country? = nil, cropPhoto: CropPhoto? = nil, domain: String? = nil, education: Education? = nil, exports: String? = nil, firstNameCase: FirstName? = nil, followersCount: Int64? = nil, friendStatus: FriendStatus? = nil, games: String? = nil, hasMobile: VkFlag? = nil, hasPhoto: VkFlag? = nil, homeTown: String? = nil, interests: String? = nil, isFavorite: VkFlag? = nil, isFriend: VkFlag? = nil, isHiddenFromFeed: VkFlag? = nil, lastNameCase: LastName? = nil, lastSeen: LastSeen? = nil, lists: String? = nil) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.deactivated = deactivated
        self.isClosed = isClosed
        self.canAccessClosed = canAccessClosed
        self.about = about
        self.activities = activities
        self.bdate = bdate
        self.blacklisted = blacklisted
        self.blacklistedByMe = blacklistedByMe
        self.books = books
        self.canPost = canPost
        self.canSeeAllPosts = canSeeAllPosts
        self.canSeeAudio = canSeeAudio
        self.canSendFriendRequest = canSendFriendRequest
        self.canWritePrivateMessage = canWritePrivateMessage
        self.career = career
        self.city = city
        self.commonCount = commonCount
        self.connections = connections
        self.contacts = contacts
        self.counters = counters
        self.country = country
        self.cropPhoto = cropPhoto
        self.domain = domain
        self.education = education
        self.exports = exports
        self.firstNameCase = firstNameCase
        self.followersCount = followersCount
        self.friendStatus = friendStatus
        self.games = games
        self.hasMobile = hasMobile
        self.hasPhoto = hasPhoto
        self.homeTown = homeTown
        self.interests = interests
        self.isFavorite = isFavorite
        self.isFriend = isFriend
        self.isHiddenFromFeed = isHiddenFromFeed
        self.lastNameCase = lastNameCase
        self.lastSeen = lastSeen
        self.lists = lists
    }
}