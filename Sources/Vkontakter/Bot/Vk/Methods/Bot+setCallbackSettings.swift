// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

public extension Bot {

    /// Parameters container struct for `setCallbackSettings` method
    final class SetCallbackSettingsParams: JSONEncodable {

        /// Идентификатор сообщества.
        public let groupId: UInt64
        
        /// Идентификатор сервера.
        public let serverId: UInt64?
        
        /// версия Callback API
        public let apiVersion: String?
        
        /// Уведомления о новых сообщениях (0 — выключить, 1 — включить).
        public let messageNew: VkFlag?
        
        /// Уведомления об исходящем сообщении (0 — выключить, 1 — включить).
        public let messageReply: VkFlag?
        
        /// Уведомления о подписке на сообщения (0 — выключить, 1 — включить).
        public let messageAllow: VkFlag?
        
        /// Уведомления о редактировании сообщения (0 — выключить, 1 — включить).
        public let messageEdit: VkFlag?
        
        /// Уведомления о запрете на сообщения (0 — выключить, 1 — включить).
        public let messageDeny: VkFlag?
        
        /// Уведомления о наборе текста сообщения ('0 — выключить, 1'' — включить).
        public let messageTypingState: VkFlag?
        
        /// Уведомления о добавлении новой фотографии (0 — выключить, 1 — включить).
        public let photoNew: VkFlag?
        
        /// Уведомления о добавлении новой аудиозаписи (0 — выключить, 1 — включить).
        public let audioNew: VkFlag?
        
        /// Уведомления о добавлении новой видеозаписи (0 — выключить, 1 — включить).
        public let videoNew: VkFlag?
        
        /// Уведомления о добавлении нового комментария на стене (0 — выключить, 1 — включить).
        public let wallReplyNew: VkFlag?
        
        /// Уведомления о редактировании комментария на стене (0 — выключить, 1 — включить).
        public let wallReplyEdit: VkFlag?
        
        /// Уведомления об удалении комментария на стене (0 — выключить, 1 — включить).
        public let wallReplyDelete: VkFlag?
        
        /// Уведомления о восстановлении комментария на стене (0 — выключить, 1 — включить).
        public let wallReplyRestore: VkFlag?
        
        /// Уведомления о новой записи на стене (0 — выключить, 1 — включить).
        public let wallPostNew: VkFlag?
        
        /// Уведомления о репосте записи (0 — выключить, 1 — включить).
        public let wallRepost: VkFlag?
        
        /// Уведомления о создании комментария в обсуждении (0 — выключить, 1 — включить).
        public let boardPostNew: VkFlag?
        
        /// Уведомления о редактировании комментария в обсуждении (0 — выключить, 1 — включить).
        public let boardPostEdit: VkFlag?
        
        /// Уведомление о восстановлении комментария в обсуждении (0 — выключить, 1 — включить).
        public let boardPostRestore: VkFlag?
        
        /// Уведомления об удалении комментария в обсуждении (0 — выключить, 1 — включить).
        public let boardPostDelete: VkFlag?
        
        /// Уведомления о добавлении нового комментария к фото (0 — выключить, 1 — включить).
        public let photoCommentNew: VkFlag?
        
        /// Уведомления о редактировании комментария к фото (0 — выключить, 1 — включить).
        public let photoCommentEdit: VkFlag?
        
        /// Уведомления об удалении комментария к фото (0 — выключить, 1 — включить).
        public let photoCommentDelete: VkFlag?
        
        /// Уведомления о восстановлении комментария к фото (0 — выключить, 1 — включить).
        public let photoCommentRestore: VkFlag?
        
        /// Уведомления о добавлении нового комментария к видео (0 — выключить, 1 — включить).
        public let videoCommentNew: VkFlag?
        
        /// Уведомления о редактировании комментария к видео (0 — выключить, 1 — включить).
        public let videoCommentEdit: VkFlag?
        
        /// Уведомления об удалении комментария к видео (0 — выключить, 1 — включить).
        public let videoCommentDelete: VkFlag?
        
        /// Уведомления о восстановлении комментария к видео (0 — выключить, 1 — включить).
        public let videoCommentRestore: VkFlag?
        
        /// Уведомления о добавлении нового комментария к товару (0 — выключить, 1 — включить).
        public let marketCommentNew: VkFlag?
        
        /// Уведомления о редактировании комментария к товару (0 — выключить, 1 — включить).
        public let marketCommentEdit: VkFlag?
        
        /// Уведомления об удалении комментария к товару (0 — выключить, 1 — включить).
        public let marketCommentDelete: VkFlag?
        
        /// Уведомления о восстановлении комментария к товару (0 — выключить, 1 — включить).
        public let marketCommentRestore: VkFlag?
        
        public let marketOrderNew: VkFlag?
        
        public let marketOrderEdit: VkFlag?
        
        /// Уведомления о новом голосе в публичных опросах (0 — выключить, 1 — включить).
        public let pollVoteNew: VkFlag?
        
        /// Уведомления о вступлении в сообщество (0 — выключить, 1 — включить).
        public let groupJoin: VkFlag?
        
        /// Уведомления о выходе из сообщества (0 — выключить, 1 — включить).
        public let groupLeave: VkFlag?
        
        /// Уведомления об изменении настроек (0 — выключить, 1 — включить).
        public let groupChangeSettings: VkFlag?
        
        /// Уведомления об изменении главной фотографии (0 — выключить, 1 — включить).
        public let groupChangePhoto: VkFlag?
        
        /// Уведомления об изменении руководства (0 — выключить, 1 — включить).
        public let groupOfficersEdit: VkFlag?
        
        /// Уведомления об внесении пользователя в чёрный список (0 — выключить, 1 — включить).
        public let userBlock: [VkFlag]?
        
        /// Уведомления об исключении пользователя из чёрного списка (0 — выключить, 1 — включить).
        public let userUnblock: VkFlag?
        
        /// уведомления о заполнении формы
        public let leadFormsNew: VkFlag?
        
        /// Уведомления о новой отметке "Мне нравится" (0 — выключить, 1 — включить).
        public let likeAdd: VkFlag?
        
        /// Уведомления о снятии отметки "Мне нравится" (0 — выключить, 1 — включить).
        public let likeRemove: VkFlag?
        
        public let messageEvent: VkFlag?
        
        /// Уведомление о создании подписки (0 — выключить, 1 — включить).
        public let donutSubscriptionCreate: VkFlag?
        
        /// Уведомление о продлении подписки (0 — выключить, 1 — включить).
        public let donutSubscriptionProlonged: VkFlag?
        
        /// Уведомление об отмене подписки (0 — выключить, 1 — включить).
        public let donutSubscriptionCancelled: VkFlag?
        
        /// Уведомление об изменении стоимости подписки (0 — выключить, 1 — включить).
        public let donutSubscriptionPriceChanged: VkFlag?
        
        /// Уведомление о том, что подписка истекла (0 — выключить, 1 — включить).
        public let donutSubscriptionExpired: VkFlag?
        
        /// Уведомление о выводе денег (0 — выключить, 1 — включить).
        public let donutMoneyWithdraw: VkFlag?
        
        /// Уведомление об ошибке при выводе денег (0 — выключить, 1 — включить).
        public let donutMoneyWithdrawError: VkFlag?
        
        public init(groupId: UInt64, serverId: UInt64? = nil, apiVersion: String? = nil, messageNew: VkFlag? = nil, messageReply: VkFlag? = nil, messageAllow: VkFlag? = nil, messageEdit: VkFlag? = nil, messageDeny: VkFlag? = nil, messageTypingState: VkFlag? = nil, photoNew: VkFlag? = nil, audioNew: VkFlag? = nil, videoNew: VkFlag? = nil, wallReplyNew: VkFlag? = nil, wallReplyEdit: VkFlag? = nil, wallReplyDelete: VkFlag? = nil, wallReplyRestore: VkFlag? = nil, wallPostNew: VkFlag? = nil, wallRepost: VkFlag? = nil, boardPostNew: VkFlag? = nil, boardPostEdit: VkFlag? = nil, boardPostRestore: VkFlag? = nil, boardPostDelete: VkFlag? = nil, photoCommentNew: VkFlag? = nil, photoCommentEdit: VkFlag? = nil, photoCommentDelete: VkFlag? = nil, photoCommentRestore: VkFlag? = nil, videoCommentNew: VkFlag? = nil, videoCommentEdit: VkFlag? = nil, videoCommentDelete: VkFlag? = nil, videoCommentRestore: VkFlag? = nil, marketCommentNew: VkFlag? = nil, marketCommentEdit: VkFlag? = nil, marketCommentDelete: VkFlag? = nil, marketCommentRestore: VkFlag? = nil, marketOrderNew: VkFlag? = nil, marketOrderEdit: VkFlag? = nil, pollVoteNew: VkFlag? = nil, groupJoin: VkFlag? = nil, groupLeave: VkFlag? = nil, groupChangeSettings: VkFlag? = nil, groupChangePhoto: VkFlag? = nil, groupOfficersEdit: VkFlag? = nil, userBlock: [VkFlag]? = nil, userUnblock: VkFlag? = nil, leadFormsNew: VkFlag? = nil, likeAdd: VkFlag? = nil, likeRemove: VkFlag? = nil, messageEvent: VkFlag? = nil, donutSubscriptionCreate: VkFlag? = nil, donutSubscriptionProlonged: VkFlag? = nil, donutSubscriptionCancelled: VkFlag? = nil, donutSubscriptionPriceChanged: VkFlag? = nil, donutSubscriptionExpired: VkFlag? = nil, donutMoneyWithdraw: VkFlag? = nil, donutMoneyWithdrawError: VkFlag? = nil) {
            self.groupId = groupId
            self.serverId = serverId
            self.apiVersion = apiVersion
            self.messageNew = messageNew
            self.messageReply = messageReply
            self.messageAllow = messageAllow
            self.messageEdit = messageEdit
            self.messageDeny = messageDeny
            self.messageTypingState = messageTypingState
            self.photoNew = photoNew
            self.audioNew = audioNew
            self.videoNew = videoNew
            self.wallReplyNew = wallReplyNew
            self.wallReplyEdit = wallReplyEdit
            self.wallReplyDelete = wallReplyDelete
            self.wallReplyRestore = wallReplyRestore
            self.wallPostNew = wallPostNew
            self.wallRepost = wallRepost
            self.boardPostNew = boardPostNew
            self.boardPostEdit = boardPostEdit
            self.boardPostRestore = boardPostRestore
            self.boardPostDelete = boardPostDelete
            self.photoCommentNew = photoCommentNew
            self.photoCommentEdit = photoCommentEdit
            self.photoCommentDelete = photoCommentDelete
            self.photoCommentRestore = photoCommentRestore
            self.videoCommentNew = videoCommentNew
            self.videoCommentEdit = videoCommentEdit
            self.videoCommentDelete = videoCommentDelete
            self.videoCommentRestore = videoCommentRestore
            self.marketCommentNew = marketCommentNew
            self.marketCommentEdit = marketCommentEdit
            self.marketCommentDelete = marketCommentDelete
            self.marketCommentRestore = marketCommentRestore
            self.marketOrderNew = marketOrderNew
            self.marketOrderEdit = marketOrderEdit
            self.pollVoteNew = pollVoteNew
            self.groupJoin = groupJoin
            self.groupLeave = groupLeave
            self.groupChangeSettings = groupChangeSettings
            self.groupChangePhoto = groupChangePhoto
            self.groupOfficersEdit = groupOfficersEdit
            self.userBlock = userBlock
            self.userUnblock = userUnblock
            self.leadFormsNew = leadFormsNew
            self.likeAdd = likeAdd
            self.likeRemove = likeRemove
            self.messageEvent = messageEvent
            self.donutSubscriptionCreate = donutSubscriptionCreate
            self.donutSubscriptionProlonged = donutSubscriptionProlonged
            self.donutSubscriptionCancelled = donutSubscriptionCancelled
            self.donutSubscriptionPriceChanged = donutSubscriptionPriceChanged
            self.donutSubscriptionExpired = donutSubscriptionExpired
            self.donutMoneyWithdraw = donutMoneyWithdraw
            self.donutMoneyWithdrawError = donutMoneyWithdrawError
        }
    
    }
    
    /**
     Позволяет задать настройки уведомлений о событиях в Callback API.
     После успешного выполнения возвращает 1.

     See also VK API Reference:
     [SetCallbackSettings](https://vk.com/dev/groups.setCallbackSettings)
     
     - Parameters:
         - params: Parameters container, see `SetCallbackSettingsParams` struct
     - Throws: Throws on errors
     - Returns: Future of `VkFlag` type
     */
    @discardableResult
    func setCallbackSettings(params: SetCallbackSettingsParams) throws -> Future<VkFlag> {
        let headers = httpHeaders(for: params)
        return try client
            .request(endpoint: "groups.setCallbackSettings", params: params, headers: headers)
            .flatMapThrowing { (container) -> VkFlag in
                return try self.processContainer(container)
        }
    }
}