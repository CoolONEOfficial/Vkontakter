// Vkontakter - VK Bot Swift SDK.
// This file is autogenerated by API package.

import AnyCodable

public extension Bot {

    /// Parameters container struct for `editMessage` method
    final class EditMessageParams: JSONEncodable {

        /// Идентификатор назначения. Для пользователя: id пользователя. Для групповой беседы: 2000000000 + id беседы. Для сообщества: -id сообщества.
        public let peerId: Int64
        
        /// Текст сообщения. Обязательный параметр, если не задан параметр attachment.
        public let message: String
        
        /// Географическая широта (от -90 до 90).
        public let lat: Double?
        
        /// Географическая долгота (от -180 до 180).
        public let long: Double?
        
        /// Медиавложения к личному сообщению, перечисленные через запятую. Каждое прикрепление представлено в формате: <type><owner_id>_<media_id> <type> — тип медиавложения: photo — фотография; video — видеозапись; audio — аудиозапись; doc — документ; wall — запись на стене; market — товар. <owner_id> — идентификатор владельца медиавложения (обратите внимание, если объект находится в сообществе, этот параметр должен быть отрицательным). <media_id> — идентификатор медиавложения. Например: photo100172_166443618 Параметр является обязательным, если не задан параметр message.
        public let attachment: Attachments?
        
        /// 1, чтобы сохранить прикреплённые пересланные сообщения.
        public let keepForwardMessages: VkFlag?
        
        /// 1, чтобы сохранить прикреплённые внешние ссылки (сниппеты).
        public let keepSnippets: VkFlag?
        
        /// Идентификатор сообщества (для сообщений сообщества с ключом доступа пользователя).
        public let groupId: UInt64?
        
        /// 1 — не создавать сниппет ссылки из сообщения
        public let dontParseLinks: VkFlag?
        
        /// Идентификатор сообщения.
        public let messageId: UInt64?
        
        /// Идентификатор сообщения в беседе.
        public let conversationMessageId: UInt64?
        
        /// Объект, описывающий шаблоны сообщений.
        public final class Template: Codable {
            
            
            public init() {
            }
        }
        
        public let template: Template?
        
        /// Объект, описывающий клавиатуру бота.
        public let keyboard: Keyboard?
        
        public init(peerId: Int64, message: String, lat: Double? = nil, long: Double? = nil, attachment: Attachments? = nil, keepForwardMessages: VkFlag? = nil, keepSnippets: VkFlag? = nil, groupId: UInt64? = nil, dontParseLinks: VkFlag? = nil, messageId: UInt64? = nil, conversationMessageId: UInt64? = nil, template: Template? = nil, keyboard: Keyboard? = nil) {
            self.peerId = peerId
            self.message = message
            self.lat = lat
            self.long = long
            self.attachment = attachment
            self.keepForwardMessages = keepForwardMessages
            self.keepSnippets = keepSnippets
            self.groupId = groupId
            self.dontParseLinks = dontParseLinks
            self.messageId = messageId
            self.conversationMessageId = conversationMessageId
            self.template = template
            self.keyboard = keyboard
        }
    
    }
    
    /**
     Редактирует сообщение.
     После успешного выполнения возвращает 1.

     See also VK API Reference:
     [EditMessage](https://vk.com/dev/messages.edit)
     
     - Parameters:
         - params: Parameters container, see `EditMessageParams` struct
     - Throws: Throws on errors
     - Returns: Future of `VkFlag` type
     */
    @discardableResult
    func editMessage(params: EditMessageParams) throws -> Future<VkFlag> {
        let headers = httpHeaders(for: params)
        return try client
            .request(endpoint: "messages.edit", params: params, headers: headers)
            .flatMapThrowing { (container) -> VkFlag in
                return try self.processContainer(container)
        }
    }
}